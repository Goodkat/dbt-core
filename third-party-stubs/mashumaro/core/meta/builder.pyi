from mashumaro.core.helpers import *
import types
import typing
from base64 import decodebytes as decodebytes, encodebytes as encodebytes
from dataclasses import Field
from mashumaro.config import BaseConfig
from mashumaro.dialect import Dialect
from mashumaro.exceptions import (
    InvalidFieldValue as InvalidFieldValue,
    MissingField as MissingField,
)
from typing import Any

NoneType: Any
__PRE_SERIALIZE__: str
__PRE_DESERIALIZE__: str
__POST_SERIALIZE__: str
__POST_DESERIALIZE__: str

class CodeLines:
    def __init__(self) -> None: ...
    def append(self, line: str) -> None: ...
    def indent(self) -> typing.Generator[None, None, None]: ...
    def as_text(self) -> str: ...
    def reset(self) -> None: ...

class CodeBuilder:
    cls: Any
    lines: Any
    globals: Any
    type_vars: Any
    field_classes: Any
    initial_arg_types: Any
    dialect: Any
    allow_postponed_evaluation: Any
    def __init__(
        self,
        cls,
        arg_types: typing.Tuple = ...,
        dialect: typing.Optional[typing.Type[Dialect]] = ...,
        first_method: str = ...,
        allow_postponed_evaluation: bool = ...,
    ) -> None: ...
    def reset(self) -> None: ...
    @property
    def namespace(self) -> typing.Dict[typing.Any, typing.Any]: ...
    @property
    def annotations(self) -> typing.Dict[str, typing.Any]: ...
    @property
    def field_types(self) -> typing.Dict[str, typing.Any]: ...
    @property
    def dataclass_fields(self) -> typing.Dict[str, Field]: ...
    @property
    def metadatas(self) -> typing.Dict[str, typing.Mapping[str, typing.Any]]: ...
    def get_field_default(self, name: str) -> typing.Any: ...
    def ensure_module_imported(self, module: types.ModuleType) -> None: ...
    def add_line(self, line: str) -> None: ...
    def indent(self) -> typing.Generator[None, None, None]: ...
    def compile(self) -> None: ...
    def get_declared_hook(self, method_name: str) -> typing.Any: ...
    def add_from_dict(self) -> None: ...
    def get_config(self, cls: Any | None = ...) -> typing.Type[BaseConfig]: ...
    def get_to_dict_flags(self, cls: Any | None = ...) -> str: ...
    def get_from_dict_flags(self, cls: Any | None = ...) -> str: ...
    def get_to_dict_default_flag_values(self, cls: Any | None = ...) -> str: ...
    def get_from_dict_default_flag_values(self, cls: Any | None = ...) -> str: ...
    def is_code_generation_option_enabled(self, option: str, cls: Any | None = ...) -> bool: ...
    def add_to_dict(self) -> None: ...
