from typing import Any

class MissingField(LookupError):
    field_name: Any
    field_type: Any
    holder_class: Any
    def __init__(self, field_name, field_type, holder_class) -> None: ...
    @property
    def field_type_name(self): ...
    @property
    def holder_class_name(self): ...

class UnserializableDataError(TypeError): ...

class UnserializableField(UnserializableDataError):
    field_name: Any
    field_type: Any
    holder_class: Any
    msg: Any
    def __init__(self, field_name, field_type, holder_class, msg: Any | None = ...) -> None: ...
    @property
    def field_type_name(self): ...
    @property
    def holder_class_name(self): ...

class UnsupportedSerializationEngine(UnserializableField):
    def __init__(self, field_name, field_type, holder_class, engine) -> None: ...

class UnsupportedDeserializationEngine(UnserializableField):
    def __init__(self, field_name, field_type, holder_class, engine) -> None: ...

class InvalidFieldValue(ValueError):
    field_name: Any
    field_type: Any
    field_value: Any
    holder_class: Any
    msg: Any
    def __init__(
        self, field_name, field_type, field_value, holder_class, msg: Any | None = ...
    ) -> None: ...
    @property
    def field_type_name(self): ...
    @property
    def holder_class_name(self): ...

class BadHookSignature(TypeError): ...

class ThirdPartyModuleNotFoundError(ModuleNotFoundError):
    module_name: Any
    field_name: Any
    holder_class: Any
    def __init__(self, module_name, field_name, holder_class) -> None: ...
    @property
    def holder_class_name(self): ...

class UnresolvedTypeReferenceError(NameError):
    holder_class: Any
    name: Any
    def __init__(self, holder_class, unresolved_type_name) -> None: ...
    @property
    def holder_class_name(self): ...

class BadDialect(ValueError): ...
